# Generated by protoc_gen_nim. Do not edit!

import base64
import intsets
import json
import strutils

import nimpb/nimpb
import nimpb/json as nimpb_json

type
    dht_PingRequest* = ref dht_PingRequestObj
    dht_PingRequestObj* = object of Message
        id: int32
    dht_PingResponse* = ref dht_PingResponseObj
    dht_PingResponseObj* = object of Message
        id: int32

proc newdht_PingRequest*(): dht_PingRequest
proc newdht_PingRequest*(data: string): dht_PingRequest
proc newdht_PingRequest*(data: seq[byte]): dht_PingRequest
proc writedht_PingRequest*(stream: Stream, message: dht_PingRequest)
proc readdht_PingRequest*(stream: Stream): dht_PingRequest
proc sizeOfdht_PingRequest*(message: dht_PingRequest): uint64
proc toJson*(message: dht_PingRequest): JsonNode
proc parsedht_PingRequest*(obj: JsonNode): dht_PingRequest

proc newdht_PingResponse*(): dht_PingResponse
proc newdht_PingResponse*(data: string): dht_PingResponse
proc newdht_PingResponse*(data: seq[byte]): dht_PingResponse
proc writedht_PingResponse*(stream: Stream, message: dht_PingResponse)
proc readdht_PingResponse*(stream: Stream): dht_PingResponse
proc sizeOfdht_PingResponse*(message: dht_PingResponse): uint64
proc toJson*(message: dht_PingResponse): JsonNode
proc parsedht_PingResponse*(obj: JsonNode): dht_PingResponse

proc fullyQualifiedName*(T: typedesc[dht_PingRequest]): string = "dht.PingRequest"

proc readdht_PingRequestImpl(stream: Stream): Message = readdht_PingRequest(stream)
proc writedht_PingRequestImpl(stream: Stream, msg: Message) = writedht_PingRequest(stream, dht_PingRequest(msg))
proc toJsondht_PingRequestImpl(msg: Message): JsonNode = toJson(dht_PingRequest(msg))
proc fromJsondht_PingRequestImpl(node: JsonNode): Message = parsedht_PingRequest(node)

proc dht_PingRequestProcs*(): MessageProcs =
    result.readImpl = readdht_PingRequestImpl
    result.writeImpl = writedht_PingRequestImpl
    result.toJsonImpl = toJsondht_PingRequestImpl
    result.fromJsonImpl = fromJsondht_PingRequestImpl

proc newdht_PingRequest*(): dht_PingRequest =
    new(result)
    initMessage(result[])
    result.procs = dht_PingRequestProcs()
    result.id = 0

proc clearid*(message: dht_PingRequest) =
    message.id = 0

proc setid*(message: dht_PingRequest, value: int32) =
    message.id = value

proc id*(message: dht_PingRequest): int32 {.inline.} =
    message.id

proc `id=`*(message: dht_PingRequest, value: int32) {.inline.} =
    setid(message, value)

proc sizeOfdht_PingRequest*(message: dht_PingRequest): uint64 =
    if message.id != 0:
        result = result + sizeOfTag(1, WireType.Varint)
        result = result + sizeOfInt32(message.id)
    result = result + sizeOfUnknownFields(message)

proc writedht_PingRequest*(stream: Stream, message: dht_PingRequest) =
    if message.id != 0:
        protoWriteInt32(stream, message.id, 1)
    writeUnknownFields(stream, message)

proc readdht_PingRequest*(stream: Stream): dht_PingRequest =
    result = newdht_PingRequest()
    while not atEnd(stream):
        let
            tag = readTag(stream)
            wireType = wireType(tag)
        case fieldNumber(tag)
        of 0:
            raise newException(InvalidFieldNumberError, "Invalid field number: 0")
        of 1:
            expectWireType(wireType, WireType.Varint)
            setid(result, protoReadInt32(stream))
        else: readUnknownField(stream, result, tag)

proc toJson*(message: dht_PingRequest): JsonNode =
    result = newJObject()
    if message.id != 0:
        result["id"] = %message.id

proc parsedht_PingRequest*(obj: JsonNode): dht_PingRequest =
    result = newdht_PingRequest()
    var node: JsonNode
    if obj.kind != JObject:
        raise newException(nimpb_json.ParseError, "object expected")
    node = getJsonField(obj, "id", "id")
    if node != nil and node.kind != JNull:
        setid(result, parseInt[int32](node))

proc serialize*(message: dht_PingRequest): string =
    let
        ss = newStringStream()
    writedht_PingRequest(ss, message)
    result = ss.data

proc newdht_PingRequest*(data: string): dht_PingRequest =
    let
        ss = newStringStream(data)
    result = readdht_PingRequest(ss)

proc newdht_PingRequest*(data: seq[byte]): dht_PingRequest =
    let
        ss = newStringStream(cast[string](data))
    result = readdht_PingRequest(ss)


proc fullyQualifiedName*(T: typedesc[dht_PingResponse]): string = "dht.PingResponse"

proc readdht_PingResponseImpl(stream: Stream): Message = readdht_PingResponse(stream)
proc writedht_PingResponseImpl(stream: Stream, msg: Message) = writedht_PingResponse(stream, dht_PingResponse(msg))
proc toJsondht_PingResponseImpl(msg: Message): JsonNode = toJson(dht_PingResponse(msg))
proc fromJsondht_PingResponseImpl(node: JsonNode): Message = parsedht_PingResponse(node)

proc dht_PingResponseProcs*(): MessageProcs =
    result.readImpl = readdht_PingResponseImpl
    result.writeImpl = writedht_PingResponseImpl
    result.toJsonImpl = toJsondht_PingResponseImpl
    result.fromJsonImpl = fromJsondht_PingResponseImpl

proc newdht_PingResponse*(): dht_PingResponse =
    new(result)
    initMessage(result[])
    result.procs = dht_PingResponseProcs()
    result.id = 0

proc clearid*(message: dht_PingResponse) =
    message.id = 0

proc setid*(message: dht_PingResponse, value: int32) =
    message.id = value

proc id*(message: dht_PingResponse): int32 {.inline.} =
    message.id

proc `id=`*(message: dht_PingResponse, value: int32) {.inline.} =
    setid(message, value)

proc sizeOfdht_PingResponse*(message: dht_PingResponse): uint64 =
    if message.id != 0:
        result = result + sizeOfTag(1, WireType.Varint)
        result = result + sizeOfInt32(message.id)
    result = result + sizeOfUnknownFields(message)

proc writedht_PingResponse*(stream: Stream, message: dht_PingResponse) =
    if message.id != 0:
        protoWriteInt32(stream, message.id, 1)
    writeUnknownFields(stream, message)

proc readdht_PingResponse*(stream: Stream): dht_PingResponse =
    result = newdht_PingResponse()
    while not atEnd(stream):
        let
            tag = readTag(stream)
            wireType = wireType(tag)
        case fieldNumber(tag)
        of 0:
            raise newException(InvalidFieldNumberError, "Invalid field number: 0")
        of 1:
            expectWireType(wireType, WireType.Varint)
            setid(result, protoReadInt32(stream))
        else: readUnknownField(stream, result, tag)

proc toJson*(message: dht_PingResponse): JsonNode =
    result = newJObject()
    if message.id != 0:
        result["id"] = %message.id

proc parsedht_PingResponse*(obj: JsonNode): dht_PingResponse =
    result = newdht_PingResponse()
    var node: JsonNode
    if obj.kind != JObject:
        raise newException(nimpb_json.ParseError, "object expected")
    node = getJsonField(obj, "id", "id")
    if node != nil and node.kind != JNull:
        setid(result, parseInt[int32](node))

proc serialize*(message: dht_PingResponse): string =
    let
        ss = newStringStream()
    writedht_PingResponse(ss, message)
    result = ss.data

proc newdht_PingResponse*(data: string): dht_PingResponse =
    let
        ss = newStringStream(data)
    result = readdht_PingResponse(ss)

proc newdht_PingResponse*(data: seq[byte]): dht_PingResponse =
    let
        ss = newStringStream(cast[string](data))
    result = readdht_PingResponse(ss)


